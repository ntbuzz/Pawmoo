***  Biscuits(MAP) 使い方説明書

 1. はじめに
  Biscuits(MAP)は Controller-View-Model のようなWEBアプリケーションを作成するための
  オブジェクト指向型のミニ・フレームワークです。
  (MAP)というのは「(M)マルチ(A)アプリケーション(P)プラットフォーム」という
  意味で命名しました。これはフレームワーク内に、複数のWEBアプリケーションを
  同居させることができる点を表現しています。

  M-V-Cに相当する各ファイルを「モジュール」というフォルダ単位で管理できるので
  ファイル間の見通しが良く、機能追加や修正の際にも修正漏れやバグ発生を抑えられます。

1.1 特徴
  ビューテンプレートは一般的なフレームワークで採用されているSmartyなどの
  テンプレートエンジンを使わず、独自の「セクションテンプレート」と呼ぶ形式を
  採用しています。
  PHPの連想配列を利用して、HTMLで書く時の構造に近い記述ができるようになっています。
  これによりレイアウト全体が見渡しやすくなり、デザイン時や保守が簡単にできます。
  またスタイルシートやjavascript、言語リソースにもセクション形式を採用しています。

  フォルダ構造も他のフレームワークと異なり「モジュール」という考え方に基づいて、
  アプリケーションの機能実装をモジュール単位で行えるようにファルダ分けしました。
  これによりリクエストURIのパスとフォルダ構造が一致するので、デバッグやテストが
  容易になります。

  リクエストURIとモジュールの関係(ルーティング)
    http://localhost/bisucuit/help/index/view/100/20
    ~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~ ~~~~~ ~~~~ ~~~~~~
      フレームワークフォルダ   ↑ 　↑  　↑　　↑
      　　　　　　　　　　　　 │ 　│  　│   メソッドへのパラメータ
　　　　　　　　　　　　　　　 │ 　│   メソッド名
　　　　　　　　　　　　　　　 │  モジュール名(コントローラー)
　　　　　　　　　　　　　　アプリ名
　　　　　　　　　　　　　　　　　　　　　　
1.2 フォルダ構成

(Biscuits)         フレームワーク本体
  ├ app
  │  ├─ (アプリ1)
  │  │   ├── Config            アプリケーション設定ファイルフォルダ
  │  │   ├── common            共有ライブラリの格納フォルダ
  │  │   ├── Models            コントローラを持たないモデルクラスのフォルダ
  │  │   ├── extends           モジュール共通の拡張クラス定義
  │  │   ├─┬ modules           アプリケーションモジュールフォルダ
  │  │   │  └─┬ Index         モジュール名フォルダ
  │  │   │      ├── View      モジュール固有ビューのテンプレート
  │  │   │      └─┬ res       モジュール有リソースフォルダ
  │  │   │          ├── css   スタイルシート
  │  │   │          └── js    javascript
  │  │   ├─┬ View              アプリケーション共通ビューのテンプレートフォルダ
  │  │   │  ├── lang          言語リソースフォルダ
  │  │   │  └─┬ res           リソースフォルダ
  │  │   │      ├── css       スタイルシートテンプレート
  │  │   │      └── js        Javascriptテンプレート
  │  │   └─┬ webroot           アプリケーション共通の静的リソース
  │  │       ├── cssimg          CSS内で使用する画像
  │  │       ├── css             スタイルシート
  │  │       ├── images          イメージファイル
  │  │       └── js              Javascript
  │  ├─ (アプリ2)
  │  │     .....
  │   ........
  ├ Core                    フレームワークフォルダ
  │  ├── Base              フレームワーク基底クラス
  │  ├── Class             フレームワーク汎用クラス
  │  ├── Common            フレームワーク共有関数ファイル
  │  ├── Config            フレームワーク設定フォルダ
  │  ├── handler           データベースドライバークラス
  │  └─┬ Template          フレームワークテンプレート
  │      ├── cssimg          CSSで使用する画像フォルダ
  │      ├── images          画像ファイル
  │      ├── lang            フレームワーク言語リソース
  │      ├── View            ビューテンプレート
  │      └─┬ res             リソースフォルダ
  │          ├── css         スタイルシート
  │          └── js          javascript
  │
  └ vendor                  ベンダーライブラリフォルダ
      ├─ vendor               PHPライブラリフォルダ
      │   ├ PHPExcel            PHPExcelのライブラリ
      │   ├ mpdf70              PDF作成ライブラリ
      │   ├ Twig                TWIGライブラリ
      │   └ FileMaker           FileMaker PHP-API
      └ webroot              外部リソース
          ├─ css                スタイルシート
          ├─ images             イメージファイル
          └─ js                 Javascript

  モジュールフォルダの中に「アプリ名」と同じフォルダを作成すると、そのモジュールは
  特別な意味をもち、コントローラーが省略されたときのトップフォルダを表示しりときの
  処理モジュールとして動作します。

1.3 対応データベース

　本ライブラリは初期状態で、SQLite3, PostgreSQLのデータベースドライバが組み込んであります。(オマケでFileMaker)
　データベースドライバを追加することで新しいデータベース利用が可能になります。
　ドライバは Libs/Class に格納してあります。
　データベース接続パラメータはアプリケーション固有になるので app/Config に定義します。
　SLite3やPostgreSQL, MariaDBなどのSQLベースのデータベース操作に必要なSQLの基本クラスは
　SQLHandlerクラスに実装しています。
　データベース固有のSQL構文が必要な処理は、それぞれのドライバでoverrideしてください。

1.4 フレームワーク・クラス

  BiscuitsではMVCに相当する基底クラスオブジェクトを継承し機能を実装します。
  アプリケーションによっては基底クラスのメソッドで不足する機能を、
  app拡張クラスフォルダ(app/extends)に、独自の継承クラスを作り込むことで、
  特定アプリ専用の基底クラスに拡張することができます。

■ クラス相関図
  Controller --+--- Model <-------+
               |      ↑          |
               +---- View -----> Helper ( -> PHPExcel/mPDF )
 
    AppController                   URLリクエストの処理
        AppModel(*)                   データベース検索、データセット
            AppModel                    リレーション参照用のサブモデル(動的生成)
        AppView                       レイアウト制御
            AppModel(*)                 AppControllerのModelリファレンス
            AppHelper                   HTML整形
                AppModel(*)               AppControllerのModelリファレンス

            (*) Modelクラスは各クラスで共有参照する
 
  クラス継承は各モデルクラスとも
      基底クラス → ( 拡張クラス → ) モジュールクラス
  となっています。拡張クラス(extends)は使用しない場合もあります。

  この継承順をもとにフレームワークの基底クラスを拡張する手順を紹介します。
  ◇ フレームワーク拡張ステップ
    ・アプリケーション個別モジュールの開発を行う
    ・モジュール間で共通のメソッドが出てきた場合、extendsフォルダに拡張クラスとして再定義しクラス継承する
    ・拡張クラスが他のアプリケーションでも再利用可能なメソッドであればフレームワークの基底クラスに再定義する

　同様にViewリソースの拡張ステップも紹介します。
  ◇ リソース拡張ステップ
    ・個別モジュールで使用するリソースをモジュールリソースフォルダに格納する
    ・モジュール間で共有できるリソースについては、共通ビューのリソースフォルダに格納する
    ・アプリケーションに依存しないリソースについてはフレームフォルダに格納する

2. クラス詳細

2.1 コントローラー詳細
　モジュールは必ずコントローラを所有しなければなりません。
　基底クラスの AppController を継承することで、モジュール側の実装は最小限で済みます。
　また基底クラスのアクションメソッドを無効化したり、デフォルトのアクションを変更することができます。

　基底クラスの AppController では、所属するモジュールのモデルクラスおよびヘルパークラスを生成します。
　ビュークラスは原則基底クラスを使用しますが、モジュール側で拡張することもできます。
　モジュール固有のモデルクラス、ヘルパークラスが無いときは基底クラスを元にクラス生成します。
　モデルクラスが基底クラスで生成されると、ドライバーが未定義のままになるため
　データベースが利用できません。

2.2 モデル詳細
　モジュールのモデルクラスは AppModel クラスを継承し、データベースへのアクセスインタフェースを提供します。
　データベースのテーブルやフィールドスキーマを定義し、データの入出力を制御します。
　実際のデータベースへのアクセスはドライバークラスが担当し、モデルクラスはインタフェースの抽象化により
　コントローラーやビューからデータベース固有の処理を隠遮します。
　データベースハンドラーはモデルクラスのメソッドに必要なインタフェースを提供し
　データベースとの直接的なデータの入出力を担当します。

  AppModel --+---- Handler
                    +-----> SQLite3
                    +-----> PostgreSQL

　モジュールに所属しないモデルクラスは Models フォルダに定義します。

2.3 ビュー詳細
　ビューはクラスではなく、テンプレートファイルの集合であるが、モジュール固有のビュークラス(AppViewを継承)も生成します。
　下位クラスにヘルパークラスを所有し、HTMLの自動生成や整形をプログラミングすることができます。
　テンプレート内部でデータベースにアクセスする必要がある場合は、コントローラーから引き継いだモデルクラスを利用して
　アクセスすることができます。
　テンプレートは通常のPHPやHTMLファイルに加え、レイアウトを簡潔に記述できるセクションフォーマットが使用できます。
　セクションフォーマットの詳細については後述します。

■ 画面レイアウト定義
  View クラスは次の３種類のテンプレートファイルを組み合わせてレイアウトします。

  template.php        PHPファイルの画面描画
  template.inc        HTMLファイルの画面描画
  template.tpl        セクション定義の画面描画
  template.mss        スタイルシート、javascriptのマージ出力テンプレート

  .inc, .tplテンプレートではHTMLデータ以外に、フレームワーク内の変数参照ができます。
  フレームワーク変数は以下のものがあります。
    {$SYSROOT$}     フレームワークのトップURL
    {$APPNAME$}     アプリケーション名
    {$URIROOT$}     アプリケーションURLのトップ
    {$URI$}         リクエストされたURI
    {$REFERER$}     リファラー
    {$controller$}  コントローラ名
    {$method$}      メソッド名 (Actionを付加する前)
    {$filter$}      フィルタ名
    {%0%}～{%9%}    フィルタ以降の数値または文字列パラメータ

     セクションテンプレートの +setvar コマンドでセットした変数も同様に参照できます。
     例:
      +setvar => [
         varnamse => values
      ]
      
      {$varname$}  =  "values"

2.4 ヘルパー詳細
　ビューの従属クラスであり、テンプレートで処理できないプログラミングが必要になる処理を担当します。
　ヘルパーもコントローラーから継承したモデルクラスにアクセスできるプロパティ変数を持つ。

2.5 テンプレート詳細

■ 共通セクションフォーマット
  画面レイアウト、スタイル・スクリプトファイルおよび言語ファイルは全てに共通の「セクション」フォーマットで記述します。
  これは PHP の連想配列の記述形式を応用したフォーマットになっています。

    キー名 => 値 or 配列

  各テンプレートでは「キー名」がタグやコマンド、識別子の役割を持つ。
  改行テキストを定義するときはダブルクォートなどの特殊文字でくくる。
  先頭と末尾の改行、空白文字はトリミングにより削除されます。
      "テキスト"          ダブルクォート 末尾に改行を入れるときは「\n」をつける
      'テキスト'          シングルクォート
      ( テキスト )        両方のクォート文字を含むときは ( ) でくくる
      { テキスト }        ( ) を含む文字列は { } でくくる
      ~ テキスト ~        ( ), { } 両方あるときは ~ でくくる
  
  セクション内で指定するハイパーリンクは、次のような省略形が使用できる。
  ただし、省略形はテンプレートの各コマンド内のみで有効であり、href 属性などで
  直接記述している場合は無効となる。

  【ハイパーリンク省略形】
      http://〜         URLの直接指定
      :〜               http://(ホスト名)/〜
      /〜               /(フレームわーフォルダ)/〜  フレームワークフォルダがルートの場合は /〜 
      ./〜              /(アプリルート)/(モジュール名)/〜
      〜                /(アプリルート)/〜

  +include, +img, %link
  クラスメソッドでは　$Helper->ALink()

  セクション内で指定するハイパーリンクは、次のような省略形が使用できる。
  ただし、省略形はテンプレートの各コマンド内のみで有効であり、href 属性などで
  直接記述している場合は無効となる。

  【ハイパーリンク省略形】
      http://〜         URLの直接指定
      :〜               http://(ホスト名)/〜
      /〜               /(フレームわーフォルダ)/〜  フレームワークフォルダがルートの場合は /〜 
      ./〜              /(アプリルート)/(モジュール名)/〜
      〜                /(アプリルート)/〜

  +include, +img, %link
  クラスメソッドでは　$Helper->ALink()

■ 画面レイアウト テンプレート (*.tpl)
 Section = {                              *** タグ・セクションの定義 ***
  @XXXXX  => [ key => Value ]             外部テンプレート呼び出し、配列は変数として引き渡し、連想配列にしなければ引数なしの呼び出し
                                          ドット(.)で始まる名前はまずインラインセクション名を参照し、未定義なら外部ファイルを参照する
  &FUNCS => [ key => value ]              Helperメソッド呼び出し、連想配列にすると引数として渡すが、スカラー定義の場合は引数なしの呼び出し
  *Comment                                コメントタグの出力
  <HTML-TAG>                              HTMLタグとしてそのまま出力する
  +setvar => [ varname => value , ...]    セクション変数を定義します。varname に + 記号を付加すると既存の変数とマージする
  +include => [ value, ... ]              JS ファイル, CSS ファイルのインクルード
  +echo => [ value, ... ]                 value のリストをそのまま出力、キー名を指定しても無視する
  +style => [ value, ... ]                value のリストをスタイルシートとして出力する
  +jquery => [ value, ... ]               value のリストをJQuery関数として出力する
  +img => [ attr => value, src ]          imageタグの簡易出力書式, class,id以外の属性を指定しない場合はスカラー値で定義できる
                                          +img => src
  +ul/ol => [ attr => value , items ]     UL/OLタグ専用のリスト出力、スカラー要素をリスト項目として出力できる
        items :=                          リスト項目は次の要素から構成する
          list-item,                        スカラー要素：　単純リスト項目
          [ list-section ],           　    配列要素：　セクション項目
          .XXXX#DDDD => [ list-section ]    クラス名(XXXX)、ID名(DDDD)付のリストセクション項目
  +dl => [ attr => value , [ items ]  ]   DLタグ専用のリスト出力、attr => value はDLタグの属性になる
      items :=                            リスト項目は次の要素から構成する
          inner-text,                       無名キースカラー要素：　DTタグのインナーテキスト
          attr => value,                    DTタグの属性
          [ list-section ],           　    無名キー配列要素：　DD要素のセクション項目
          .XXXX#DDDD => [ list-section ]    DD属性にクラス名(XXXX)、ID名(DDDD)を付けたセクション項目
  %link => [ link_str => href, ... ]      ハイパーリンク link_str に href のリンクを設定,Helper->ALinkを呼び出す
                                          単独タグの場合は省略形として以下の書式も使用できる
                                          %link_str => href
  +inline.SecName => [ ... ]              インラインのレイアウトセクション定義。テンプレート呼出しで再利用ができる
  -TAGS.XXXX#DDDD => [ attr => value,.. ] クラス名、ID名以外の属性付の単独タグ出力、キー名の無いものは無視する
  TAGS.XXXX#DDDD => [ Section ]           クラス名(XXXX)、ID名(DDDD)付のタグ出力、子要素に配列定義するとサブセクションとして処理する
  Text                                    スカラー要素のときはinnerテキストとして出力、セクション外の場合はHTMLタグ名として出力する
 }

  .tpl はViewの中で配列に再構築してから、セクション処理によりタグ出力されます。

■ スタイル/スクリプト テンプレート (template.mss)
  テンプレートファイル名は固定ファイル名とします。テンプレート内にはスタイル・スクリプトのセクションを定義します。
    Stylesheet => []                 スタイルシートのテンプレートセクション
    Javascript => []                 Javascriptのテンプレートセクション
 
  テンプレートファイルの探索は以下の順で行う
  モジュールフォルダ(modules/*/res/)
  → アプリ共通フォルダ(View/res/)
    → wwwroot フォルダ(wwwroot/)
      → Libテンプレートフォルダ(Libs/Template/res/)

  テンプレート書式：
  // コメント行                         行末までコメントとして読み飛ばす、複数行のコメントは /*   */ で括る
  Section => [                          'Section' 名が拡張子を除いたファイル名として扱う
   *Comment                             * コメントタグ の出力
   @compact => on|off                   不要な空白を全て除去してコンパクト化する
   @comment => on|off                   コメント行のみを削除
   @message => on|off                   デバッグ用のコメントメッセージを抑制する
   @charset => XXXX                     文字セットを出力する
   +import => [ value, ... ]             CSS/JS ファイルのインクルード、スカラー値でも可
                                        テンプレートファイルと同レベルか上位レベルのフォルダで探索する
   +jquery => [ value, ... ]             JSファイルの時のみ、JQuery関数 ファイルのインクルード
                                        テンプレートファイルと同レベルか上位レベルのフォルダで探索する
   +section => subsection                別のセクション定義を読み込む、自ファイルに存在しなければ上位ファイルで探索する
                                        subsection の先頭に＾を付加するとフレームワークテンプレートフォルダを探索する
                                        ＠を付加したときはフレームワーク定数「DEBUGGER」がTRUEの時だけ探索する
   tag => value                         タグの出力 => tag "value";
   tag => [ attr , ... ]                属性リストの出力 => tag { attr; ... }
  ]

  セクション外にあるコマンド(import/jquery/section/comment)はセクション指定にかかわらず処理される
  ただし、最初に見つけたテンプレート内のみで section コマンドで呼び出したテンプレート内ではセクション外のコマンドは処理されない。
  全てのセクションファイルにセクション名が見つからなかった場合、実ファイル名を探索して見つけたファイルを出力します。
  インポートするファイルがひとつだけのセクション定義を不必要に増やさなくて済む。
  
  URLにモジュール名を含めたときはモジュールフォルダ下のリソースから探索を始める
  アプリ共通リソースから探索するときはモジュール名を "res" とします。
    ex. index/css/mystyle.css   Indexモジュールの res フォルダ下にある template.mss ファイルから探索する
        res/css/common.css      アプリ共通フォルダ、またはLibテンプレートフォルダが対象

  CSSファイル名に「.min」を付加すると、ファイル内のコメントおよび改行・空白を削除したコンパクト形式で結合出力します。
  実ファイルの出力でも使用可。
    ex. res/css/style.css       ファイルの内容そのままで出力
        res/css/style.min.css   コメント行、改行・空白を削除しコンパクト化して出力する

  デバッグ中は[.min]をつけずにスタイルシートやスクリプトをテストし、完成したら「.min」を付けて運用します。
  (注)javascriptの場合、構文の最後(特に "}" 後)にセミコロンが無いとエラーとなるので必ずセミコロンを書く癖をつけること。

  import/jqueryコマンドでインポートされるファイル内では前述のフレームワーク変数と以下のクラス変数を参照することができます。
    {$appName$}         アプリ名
    {$moduleName$}      モジュール名または 'Res'(共通リソース名)
    {$filename$}        拡張子を除いたファイル名
    {$extension$}       拡張子

  またインポートするファイル名にクエリ文字列を付加することで環境変数として使用できます。
  このクエリ文字列はブラウザ上には表示されず、フレームワーク外からは操作できないので安全に使用できます。
    ex.  res/js/funcs.js?theme=green         {$thena$} 変数として funcs.js 内で使用可能になる

■ 言語リソース テンプレート (*.lng)
  言語リソースは「モジュール名＋拡張子(lng)」で言語フォルダへ格納します。
  定義フォーマットはセクション定義と同じ形式になります。参照するときは識別子をピリオドで連結した文字列を指定します。
  相対参照が指示された時に、識別子が存在しなければ絶対参照を試みる。
    相対参照: .識別子1.識別子2
    絶対参照: 識別子1.識別子2

  例えば以下の定義の時に、モジュール内の相対参照「.識別子A.識別子B」は識別子Bが未定義のため、絶対参照「識別子A.識別子B」を参照します。
    識別子A => [
      識別子B => 絶対参照
    ]
    モジュール名 => [
      識別子A => [
        識別子C => 相対参照
      ]
    ]
  このルールを利用すると、絶対参照で定義された汎用識別名を、モジュール内で別の値にオーバーライドすることができます。
  テンプレートのファイル名はリソース名として言語リソースに格納されます。
  ファイル名先頭に「＃」を付けるとグローバルリソースとして登録します。
  また、モジュールリソース内でも識別名を「＃」で始めるとグローバル識別子として登録されます。
  起動時には「common.lng」ファイルがグローバル識別子を含むリソースとして読み込まれる。
  ※ファイル名「common」はモジュール名として使用しない。
  ex.1 
  Lang.lng
    #GLOBAL => グローバル識別子       // 識別子は「GLOBAL」
    LOCAL => 識別子                   // 識別子はファイル名をモジュール名とした「Lang.LOCAL」
  ex.2
    #Lang.lng                         // Lang.lng で定義した識別名を全てグローバル識別子として登録
    #GLOBAL => グローバル識別子       // 識別子は「GLOBAL」
    LOCAL => 識別子                   // 識別子は「LOCAL」

  言語リソースはモジュール名をともに読み込むようになっており、最小限必要な定義ファイルのみを読み込むが
  他のモジュールを利用する場合、別の言語リソースも必要になります。
  そのような場合には定義ファイル内でインポートコマンド「＠ファイル名」を記述しておきます。
  それらのファイル同士で相互インポートになる場合は、先に読み込んだ方が有効リソースとなります。
  ただし、グローバル識別子のリソースは最後に読み込んだものが有効となる点がモジュールリソースとは異なります。

2.6 クラスメソッド詳細  

  フレームワーク共通の静的クラスと、モジュール実装に必要な基底クラスに分類されます。
  静的クラスには、モジュールファイルの読み込みやディスパッチャをまとめた App クラス名、
  デバッグ用の APPDEBUG クラス、言語リソース用の LangUI クラスがあります。

2.6.1 静的クラス
　静的クラスはフレームワーク全体で共通の変数、処理を実装しています。
　モジュールクラスから任意に参照することができます。

◆ App クラス
・静的変数
  App::$SysVAR;                 // URIROOT, WEBROOT, URI, QUERY 変数
  App::$AppName;                // アプリケーション名
  App::$DocRoot;                // DOCUMENT_ROOT 変数
  App::$Referer;                // HTTP_REFERER
  App::$Query;                  // urlのクエリー文字列の連想配列
  App::$Filter;                 // メソッドのフィルタ指示
  App::$Params;                 // メソッドの数値パラメータ配列
  App::$ParamCount;             // 引数の数
  App::$Controller;             // コントローラ名
  App::$ActionMethod;           // メソッド名

・静的メソッド
  App::LoadModuleFiles(コントローラ名)      // appコントローラと付属モジュールファイルの読込
  App::Get_SysRoot(付加パス)               // フレームワークのトップパスに付加パスを付けた文字列
  App::Get_AppRoot(付加パス)               // アプリケーションのトップパスに付加パスを付けた文字列
  App::WebInclude(読込み配列)             //  css/js/icoファイルの読込タグ出力（単独）
  App::ImageSRC(ファイル名, 属性)         // imagesのインクルードタグ出力

◆ APPDEBUG クラス
・静的変数
  APPDEBUG::$LevelMsg;                    // レベルメッセージの配列

・静的メソッド
  APPDEBUG::INIT(メッセージレベル)        // メッセージ出力レベルの設定
  APPDEBUG::RUN_START()                   // 実行時間測定
  APPDEBUG::MSG_SORT()                    // メッセージ要素の並替え
  APPDEBUG::MSG(メッセージレベル,出力オブジェクト, タイトル)    // デバッグ用のメッセージ出力
  APPDEBUG::DumpMessage()                 // デバッグダンプ
  APPDEBUG::DebugDump(メッセージレベル,出力配列)                // 配列のダンプ

◆ LangUI クラス
・静的変数
  LangUI::$STRINGS;                     // 翻訳言語配列

・静的メソッド
  LangUI::construct($lang)              // 言語リストを元にクラスを初期化する (Main.phpのみで使用)
  LangUI::LangFiles($files)             // モジュール言語ファイルを読み込む、$filesは配列可
  LangUI::get_value($mod, $id, $allow)  // モジュール内の言語識別名から文字列を取り出す、allow = TRUE なら配列を返す
  LangUI::get_array($arr, $mod, $var)   // 言語識別名から翻訳要素名を取り出し、連想配列の値を返す

◆ MySession クラス
・静的変数
  MySession::$EnvData;                  // セッションに記憶する環境変数
  MySession::$PostEnv;                  // 環境変数とREQUEST されてきた変数(POST/GET)

・静的メソッド
  MySession::InitSession()              // セッション変数を初期化する(Main.phpのみで使用)
  MySession::CloseSession()             // セッション変数を書き戻す(Main.phpのみで使用)
  MySession::PostVars(...$arr)          // POST変数を取り出す、引数は連想配列のキー名
  MySession::SetDefault($nm,$val)       // POST変数に値が無ければ、$val値をセット
  MySession::SetEnvVar($nm,$val)          // POST変数に値をセット

◆ SendMail クラス
・静的変数
    SendMail::$Header;                  // メールヘッダ
    SendMail::$From;                    // 差出人
    SendMail::$To;                      // 宛先
    SendMail::$CC;                      // 写し
    SendMail::$BCC;                     // ブラインドコピー
    SendMail::$Message;                 // メール本文
    SendMail::$Subject;                 // 件名

・静的メソッド
    SendMail::_Init()                   // static クラスにおける初期化処理(Main.phpのみで使用)
    SendMail::AppendMessage($msg)       // 本文にmsgを追加
    SendMail::SetFrom($username,$email) // 差出人を設定
    SendMail::AppendCC($email)          // 写しの宛先を追加
    SendMail::Send()                    // メール送信

2.6.2 動的クラス
  動的クラスはモジュール実装のための基底クラスになっています。
  コントローラーやビューの基本的なメソッドが実装されています。
  アプリケーションモジュールはこれらのクラスを継承することで、モジュール固有の処理に専念できます。
  基底クラスに実装されたメソッドをモジュール固有のものに置き換えたいときは、メソッドを再定義してください。
  ただし、基底クラスの他のメソッドに影響がでないように、整合性をとる必要があるメソッドもあるので要注意。

◆ モジュールクラス (* protectedメソッド：継承クラスのみで使用可)

・ベースクラス(AppObject)
  モジュールクラスの最上位クラスとなるオブジェクト管理のためのクラスです。
  MVCモデルに依存しないオブジェクトの管理クラスとなります。

  *  $AOwner;                   // 所有オブジェクト
  *  $ClassType;                  // オブジェクトの所属クラス(Controller, Model, View, Helper)
  *  $ModuleName;                 // モジュールの名前
  *  $ClassName;                  // 自身のクラス名
  *  $LocalePrefix;               // 言語プレフィクス　初期値はモジュール名をセットする

     ClassInit()                // サブクラスの初期化処理(サブクラス内でオーバーライド)
  *  setProperty($database)     // 連想配列によるクラスプロパティの初期化
  *  addSubclass($PropName)     // 動的クラスプロパティを生成

    _(識別名)                     // 言語ファイルから識別名で定義された文字列を取り出す
    _in(配列,識別名)              // 言語ファイルの識別子を元に連想配列から値を取り出す

・コントローラークラス(AppController)
    $defaultAction                //  デフォルトのアクション
    $defaultFilter                //  デフォルトのフィルター
    $disableAction                  // 禁止する継承元のアクション

    ListAction()                  // レコードリストの一覧表示
    FindAction()                  // 検索
    ViewAction()                  // レコード表示
    MakepdfAction()               // PDFを作成する
    UpdateAction()                // レコード更新

    モジュールによっては[find]や[page]メソッドを呼び出されては困る、という場合は
    モジュール側で例外発生するようにオーバーライドします。

    // ページングアクションを無効にする
    public function PageAction() {
        throw new Exception('BAD Method...');
    }

・モデルクラス(AppModel)
    $DatabaseSchema             // クラス・プロパティ変数連想配列として定義する(static)
  * $dbDriver;                  // データベースドライバー
  * $TableHead;                 // テーブルヘッダ
  * $fields;                    // レコードフィールドの値
    $pagesize;                        // ページャーの表示単位
    $page_num;                        // 表示するページ番号
    $record_max;                      // 総レコード数

    getRecordByKey($id)         // PrimaryKey でレコードを取得
    GetRecord($num)             // アイテムの読み込み (JOIN無し)
    getRecordField($key,$field) // フィールドの読み込み (JOIN無し)
      SetPage($pagesize,$pagenum) // ページング設定
    RecordFinder($cond)         // レコードリストの読み込み(JOIN済レコード)
    fetchRecord()               // レコードの取得
    UpdateRecord($num,$row)     // レコードの更新

・ビュークラス(AppView)
  ビュークラスはテンプレート処理へのI/Fを提供するクラスだが、サブクラスでメソッドを拡張することができる
  * $Layout;                          // レイアウトテンプレート名
    SetLayout($layoutfile)      // デフォルトレイアウト変更
    PutLayout()                 // レイアウト出力
    ViewTemplate($name)         // レイアウトテンプレート処理

・ヘルパークラス(AppHelper)
    ViewTemplate($name)         // 親のレイアウトテンプレート処理を呼び出す
    SetData($data)                      // ヘルパープロパティ変数のセット
    Resource ($res)             // リソースの出力
    ALink ($lnk,$txt)           // ハイパーリンクの生成, 言語IDを参照するには$txtを＃文字で始める
                                // $lnk を / で始めるとフレームワークのTOP、:で始めるとサイトのTOPへリンクする
    MakePageLinks()             // ページング用のリンクボタンを生成する
    MakeListTable ($deftab)     // ヘッダー付きのテーブルリスト表示、$deftabにはパラメータ
                                // $deftab['category'] = テーブルクラス
                                // $deftab['tableId']  = テーブルID 指定無しは "_TableList"
                                // $deftab['pager']    = ページャーナビを表示する
  * putTableHeader()            // テーブルヘッダーの出力(オーバーライドで変更可)
  * putColumnData($lno,$columns)// レコードカラムを出力(オーバーライドで変更可)
    Tabset ($name,$menu,$sel)   // タブセットの生成 (UL版)
    TabContents ($sel)          // タブリストの生成 (UL版)
    Form ($act, $attr)          // フォームタグの生成
    Select ($key,$name)         // SELECTタグの生成
    Input ($type,$name,$attr)   // INPUTタグの生成
    ImageTag ($file,$attr)      // webrootファイルの読込
  
・スタイルクラス(AppStyle)
  ※スタイルクラスは resource.php により処理されるので、通常は使用しない
    ViewHeader()                //　ContentType のヘッダ出力
    ViewStyle($filename)        //　レイアウトテンプレート処理

3.0 コントロール・ライブラリ

  Biscuitsはアプリケーションの構築に役立つプリミティブなコントロールコンポーネントが
  テンプレートやリソースに組み込んであります。
  これらは「セクションフォーマット」とJavascriptライブラリで提供されます。
  HTMLタグを直接記述すればセクション形式を使わなくてもすみますが、可読性が落ちるので
  可能な限りセクション形式を使用してください。
  
■ フローティング・ウィンドウ
  インナーウィンドウを表示します。ウィンドウの移動とリサイズが可能になっています。
  利用するには次のようなタグセクションを定義します。

    .floatWindow#＜要素ID＞ => [
      size => "幅,高さ,最小幅,最小高さ"　　　　// 指定しない場合はデフォルトサイズ
      data#init => [ value => ＜ウィンドウに表示する初期データ＞ ]  // Drag&Dropウィンドウの時に使う
      dl => [ dt => [ "ウィンドウのタイトル" ]
      dd => [
        div#datalist => [ ＜ウィンドウに表示するデータ＞ ]
      ] ]
    ]

  #init タグはウィンドウがドラッグ＆ドロップタイプの時に、初期状態のコンテンツ表示に使用します。
  通常のプロパティタイプのウィンドウにする場合は不要です。

■ バルーンヘルプ
  ポップアップするバルーンヘルプを表示します。
  バルーン表示のターゲットには「？」アイコンが自動的に付加されます。
  バルーン表示には、クリック式とマウスオーバー式が選べます。

    // バルーンヘルプ
    .popup-baloon{＜表示対象の要素ID＞} => [
      ＜テキスト＞
    ]

    表示対象となる要素IDの先頭に「＠」文字を付加すると、
    マウスオーバーによるポップアップバルーンを表示します。
    何も付加しないときはクリックバルーンとなります。

■ ポップアップ・ウィンドウ
  指定要素からポップアップするインナーウィンドウを表示します。
  フローティング・ウィンドウとの違いは、ウィンドウの移動ができない点となります。

    .popup-box#＜要素ID＞{＜表示対象の要素ID＞} => [
      size => "幅,高さ,最小幅,最小高さ"　　　　// 指定しない場合はデフォルトサイズ
      .contents => [ ＜ウィンドウに表示するデータ＞ ]
    ]
  
■ コンテキストメニュー
  右クリックで表示されるポップアップメニューを定義します。
  メニューを実行する関数を定義したグローバル変数を一緒に定義しておく必要があります。
  コンテキストメニューは UL タグで定義します。

    // コンテキストメニュー
    +ul.context-menu#＜要素ID＞{＜メニュー表示対象の要素ID＞} => [
      ＜メニューID＞ => [ ＜メニュー文字列＞ ]
      [ ＜処理の無いメニュー＞ ]        // <hr> で区切り線を挿入する時など
      ...
    ]

    ポップアップメニューを処理するコールバック関数をグローバルオブジェクト
    popup_menu_function オブジェクトに登録します。

      var popup_menu_function = {
          "＜メニューID＞": function (＜メニュー表示対象のJQueryオブジェクト＞) {
              // ここにメニュー実行の処理を記述する
          },
          ...
      };

■ fixedstickyクラス
  固定メニューを表示するクラスを定義します。
  data-class または data-id で指定した親要素のスクロールにあわせて
  表示位置がトップに固定されるようにします。
  CSSの"position: sticky" がうまく動作しない時に使用してください。

      <div class='fixedsticky' data-element="selector">
        selector 要素のスクロールに合わせて固定表示される
      </dev>
