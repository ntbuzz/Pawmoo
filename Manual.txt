***  Radweapst 使い方説明書
Rapid Development Web Application Platform by Section Template

 1. はじめに
  Radweapst は Controller-View-Model のようなWEBアプリケーションを素早く作成するための
  オブジェクト指向型のミニ・フレームワークです。
  M-V-Cに相当する各ファイルを「モジュール」というフォルダ単位で管理できるので
  ファイル間の見通しが良く、機能追加や修正の際にも修正漏れやバグ発生を抑えられます。

1.1 特徴
  ビューテンプレートは一般的なフレームワークで採用されているSmartyなどの
  テンプレートエンジンを使わず、PHPの連想配列を利用した独自の「セクションテンプレート」
  と呼ぶ形式を採用しています。
  セクション構文はHTMLの構造に近い記述ができるようになっています。
  これによりレイアウト全体が見渡しやすくなり、デザイン時や保守が簡単にできます。
  またスタイルシートやjavascript、言語リソースにもセクション形式を採用しています。

  フォルダ構造も他のフレームワークと異なり「モジュール」という考え方に基づいて、
  アプリケーションの機能実装をモジュール単位で行えるようにファルダ分けしました。
  これによりリクエストURIのパスとフォルダ構造が一致するので、デバッグやテストが
  容易になります。

  リクエストURIとモジュールの関係(ルーティング)
    http://localhost/radweapst/help/index/view/100/20
    ~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~ ~~~~~ ~~~~ ~~~~~~
      フレームワークフォルダ   ↑ 　↑  　↑　　↑
      　　　　　　　　　　　　 │ 　│  　│   メソッドへのパラメータ
　　　　　　　　　　　　　　　 │ 　│   メソッド名
　　　　　　　　　　　　　　　 │  モジュール名(コントローラー)
　　　　　　　　　　　　　　アプリ名

1.2 フォルダ構成

(radweapst)         フレームワーク本体
  ├ app
  │  ├─ (アプリ1)
  │  │   ├── Config            アプリケーション設定ファイルフォルダ
  │  │   ├── common            共有ライブラリの格納フォルダ
  │  │   ├── Models            コントローラを持たないモデルクラスのフォルダ
  │  │   ├── extends           モジュール共通の拡張クラス定義
  │  │   ├── error             エラーページ等の単一ページ出力用
  │  │   ├─┬ modules           アプリケーションモジュールフォルダ
  │  │   │  └─┬ Index         モジュール名フォルダ
  │  │   │      ├── View      モジュール固有ビューのテンプレート
  │  │   │      └─┬ res       モジュール有リソースフォルダ
  │  │   │          ├── css   スタイルシート
  │  │   │          └── js    javascript
  │  │   ├─┬ View              アプリケーション共通ビューのテンプレートフォルダ
  │  │   │  ├── lang          言語リソースフォルダ
  │  │   │  └─┬ res           リソースフォルダ
  │  │   │      ├── css       スタイルシートテンプレート
  │  │   │      └── js        Javascriptテンプレート
  │  │   └─┬ webroot           アプリケーション共通の静的リソース
  │  │       ├── cssimg          CSS内で使用する画像
  │  │       ├── css             スタイルシート
  │  │       ├── images          イメージファイル
  │  │       └── js              Javascript
  │  ├─ (アプリ2)
  │  │     .....
  │   ........
  ├ Core                    フレームワークフォルダ
  │  ├── Base              フレームワーク基底クラス
  │  ├── Class             フレームワーク汎用クラス
  │  ├── Common            フレームワーク共有関数ファイル
  │  ├── Config            フレームワーク設定フォルダ
  │  ├── error             エラーページ等の単一ページ出力用
  │  ├── handler           データベースドライバークラス
  │  └─┬ Template          フレームワークテンプレート
  │      ├── lang            フレームワーク言語リソース
  │      ├── View            ビューテンプレート
  │      ├─┬ res             リソースフォルダ
  │      │  ├── css           スタイルシート
  │      │  └── js            javascript
  │      └─┬ webroot         テンプレート共通の静的リソース
  │          ├── cssimg        CSS内で使用する画像
  │          ├── css           スタイルシート
  │          ├── images        イメージファイル
  │          └── js            Javascript
  │
  └ vendor                  ベンダーライブラリフォルダ
      ├─ vendor               PHPライブラリフォルダ
      │   ├ PHPExcel            PHPExcelのライブラリ
      │   ├ mpdf70              PDF作成ライブラリ
      │   ├ Twig                TWIGライブラリ
      │   └ FileMaker           FileMaker PHP-API
      └ webroot              外部リソース
          ├─ css                スタイルシート
          ├─ images             イメージファイル
          └─ js                 Javascript

  モジュールフォルダの中に「アプリ名」と同じフォルダを作成すると、そのモジュールは
  特別な意味をもち、コントローラーが省略されたときのトップフォルダを表示しりときの
  処理モジュールとして動作します。

1.3 対応データベース

　本ライブラリは初期状態で、SQLite3, PostgreSQL, MariaDB(MySQL)のデータベースドライバが
　組み込んであります。(オマケでFileMaker)
　データベースドライバを追加することで新しいデータベース利用が可能になります。
　ドライバは Libs/Class に格納してあります。
　データベース接続パラメータはアプリケーション固有になるので app/Config に定義します。
　SLite3やPostgreSQL, MariaDBなどのSQLベースのデータベース操作に必要なSQLの基本クラスは
　SQLHandlerクラスに実装しています。
　データベース固有のSQL構文が必要な処理は、それぞれのドライバでoverrideしてください。

1.4 フレームワーク・クラス

  WaffleではMVCに相当する基底クラスオブジェクトを継承し機能を実装します。
  アプリケーションによっては基底クラスのメソッドで不足する機能を、
  app拡張クラスフォルダ(app/extends)に、独自の継承クラスを作り込むことで、
  特定アプリ専用の基底クラスに拡張することができます。

■ファイルのオートロード
  アプリケーションフォルダ内の common フォルダはモジュールを読み込む前に
  全てのファイルを include します。
  デバッグ用の関数や、共通のライブラリ関数などはここに定義しておきます。
  クラスファイルを作成する場合は、クラス名.php というファイル名で
  「Class」または「extends」フォルダに格納しておくと、オートローダーが
  自動的にファイルを読み込むので、面倒な require を記述する必要がありません。

■ クラス相関図
  Controller --+--- Model <-------+
               |      ↑          |
               +---- View -----> Helper ( -> PHPExcel/mPDF )
 
    AppController                   URLリクエストの処理
        AppModel(*)                   データベース検索、データセット
            AppModel                    リレーション参照用のサブモデル(動的生成)
        AppView                       レイアウト制御
            AppModel(*)                 AppControllerのModelリファレンス
            AppHelper                   HTML整形
                AppModel(*)               AppControllerのModelリファレンス

            (*) Modelクラスは各クラスで共有参照する
 
  クラス継承は各モデルクラスとも
      基底クラス → [ 拡張クラス → ]  モジュールクラス
  となっています。拡張クラス(extends)は使用しない場合もあります。

  この継承順をもとにフレームワークの基底クラスを拡張する手順を紹介します。
  ◇ フレームワーク拡張ステップ
    ・アプリケーション個別モジュールの開発を行う
    ・モジュール間で共通のメソッドが出てきた場合、extendsフォルダに拡張クラスとして再定義しクラス継承する
    ・拡張クラスが他のアプリケーションでも再利用可能なメソッドであればフレームワークの基底クラスに再定義する

　同様にViewリソースの拡張ステップも紹介します。
  ◇ リソース拡張ステップ
    ・個別モジュールで使用するリソースをモジュールリソースフォルダに格納する
    ・モジュール間で共有できるリソースについては、共通ビューのリソースフォルダに格納する
    ・アプリケーションに依存しないリソースについてはフレームフォルダに格納する

1.5 多言語対応
  本フレームワークでは多言語の扱いに複数の仕組みを用意しています。

1.5.1 ショートテキスト
  メニューやラベルなど、短いテキストを多言語化するには言語クラスを使います。
  翻訳されたテキストは言語リソーステンプレートに記述し、参照する時は言語クラスのメソッド
  またはビューテンプレート内で言語リソース変数として参照します。
  言語クラスへのアクセスは最上位クラスのAppObjectがカプセル化しており、
      $this->_(言語識別子);
  としてアクセスできます。
  ビューテンプレート内では ${#言語識別子} として参照します。
  言語識別子の詳細は後述の言語リソーステンプレートを参照してください。

1.5.2 レコードフィールド
  データベース内のフィールド値を多言語化する場合は、モデルクラスの言語エイリアスインターフェースを使用します。
  この機能はあらかじめレコードフィールドにマスターフィールド、言語フィールドを定義しておき、
  接続してきたブラウザの言語仕様を元に参照するフィールドを自動的に切替える機能です。
  この機能を有効にするにはモデルクラス内のデータベーススキーマ定義に言語フラグを立てておきます。
  また、モデルクラス内のプロパティ(AliasMode)をTRUEにしておきます。(デフォルト値はTRUE)
      static $DatabaseSchema = [
        ...
        'Schema' => [
            'title'    => ['',101],    // 百位が言語フラグ 言語が en なら title_en が有効なフィールド名になる
            'contents' => ['',101],

  この仕組みは多言化が必要なフィールド数が少ない場合に有効です。
  レコード全体が翻訳対照になる場合は次項のテーブルスイッチを使います。

1.5.3 テーブルスイッチ
  テーブルそのものを言語別に用意してデータベース操作を行う仕組みです。
  それぞれのテーブル構造は同一である必要があります。
  どの言語テーブルに接続するかはモデルクラスのDataTableプロパティの代わりにテーブルスイッチプロパティで定義します。
      static $DatabaseSchema = [
        ...
        'ModelTables' => [
          '*'   => 'MyTable',
          'en'  => 'MyTable_en',
        ],
  ＊　は言語識別が一致しなかったときに使われるテーブル名を指名します。
  テーブル名は自由に命名できますが、メンテナンスを考慮して同じ名前に言語識別文字列を付加したものを推奨します。

1.5.3 その他
  これまでの仕組みで対応できないものは、アプリケーション独自に多言語化を行ってください。
  その場合、本フレームワークの多言語対応の仕組みを全て無効化して使用します。
  無効化する場合は
    ・言語リソースを定義しない
    ・スキーマ定義の言語フラグをOFF(百位の値を使用しない)
    ・モデルクラスの ClassInit() メソッド内で AliasMode = FALSE とする
    ・テーブルスイッチを使わずに DataTable プロパティでテーブルを支持する

2. クラス詳細

2.1 コントローラー詳細
　モジュールは必ずコントローラを所有しなければなりません。
　基底クラスの AppController を継承することで、モジュール側の実装は最小限で済みます。
　また基底クラスのアクションメソッドを無効化したり、デフォルトのアクションを変更することができます。

　基底クラスの AppController では、所属するモジュールのモデルクラスおよびヘルパークラスを生成します。
　ビュークラスは原則基底クラスを使用しますが、モジュール側で拡張することもできます。
　モジュール固有のモデルクラス、ヘルパークラスが無いときは基底クラスを元にクラス生成します。
　モデルクラスが基底クラスで生成されると、ドライバーが未定義のままになるため
　データベースが利用できません。

2.2 モデル詳細
　モジュールのモデルクラスは AppModel クラスを継承し、データベースへのアクセスインタフェースを提供します。
　データベースのテーブルやフィールドスキーマを定義し、データの入出力を制御します。
　実際のデータベースへのアクセスはドライバークラスが担当し、モデルクラスはインタフェースの抽象化により
　コントローラーやビューからデータベース固有の処理を隠遮します。
　データベースハンドラーはモデルクラスのメソッドに必要なインタフェースを提供し
　データベースとの直接的なデータの入出力を担当します。

  AppModel --+---- Handler
                    +-----> SQLite3
                    +-----> PostgreSQL
                    +-----> MySQL

2.2.1 テーブルスキーマ書式
  モデルクラスではデータベース接続のパラメータ定義とフィールドスキーマ定義で
  モデルクラスの動作を制御します。
  フィールドスキーマの定義は次のようにします。

  'Schema' => [
      フィールド名    => [ 表示用エイリアス名 ,　制御フラグ {}, 表示幅, JOIN定義, カラム連結 } ],
      ...
  ]
  { ... } 内は省略可能

  フィールド名：      データベーステーブルの列名です
  表示用エイリアス：  列名を別名でアクセスするためのエイリアスフィールド名です。不要なら空文字列にします。
  制御フラグ：        主にヘルパー基底クラスで使用します。10進数で桁ごとに用途が異なります。
                1位     0 = 非表示、1 = 表示・ソートなし、 2 = 表示・ソート可能
               10位     0 = なし、 1 = 左寄せ、 2 = 中央寄せ、 3 = 右寄せ
              100位     0 = ロケール無効、 1 = ロケール有効
                      ロケールフィールドは、デフォルトのフィールド名にアンダースコア＋ロケール名を付加した名前になります。
                      有効にするとロケール名の付加されたフィールドがR/W対象となります。
                      ただしテーブルにロケール名のついた列が定義されていないときは無効となります。
                      field::contents   =    0 → contents,  1 → contents_en (ロケールが en_US の時)
  表示幅              カラム表示幅を制御したいときに使用する(HeaderSchemaの4番目の要素に記憶される)
  JOIN定義            フィールド名にリレーションする「モデル名.カラム名.取得カラム名」を指定する
                      複数のカラムを取得する場合は「モデル名.カラム名」をキー名とする連想配列で定義する
                      ex. 'name_id' => ..., [ 'NameModel.id' => ['firstName','lastName'] ]
                      取得したカラムはフィールド名から[_id]を取り除いた要素名で参照できるようになる
                      複数カラムのときは取得カラム名をアンダースコアで転結する
                      ex. 上記の定義では要素名が 「name_firstName」と「name_lastName」となる
  カラム連結          複数のカラムを連結した仮想カラムを生成する。
                      ex. 'name_id' => ..., [ 'fullName' => ['firstName','lastName'] ]
                      firstName と lastName カラムを連結して fullName カラムに描き込む

　モジュールに所属しないモデルクラスは Models フォルダに定義します。

2.2.2  条件句の指定方法（SQL限定)
  モデルクラスの各メソッドで使用する、レコード検索における条件句には論理式が使用できます。
  論理式は連想配列で指定し、次のような形式になります。

    論理積   	AND => [ item, item,... ] | [ item, item,...]
    論理和   	OR => [ item, item,... ]
    否定      NOT => [ item ]

  item の指定はカラム名に演算子を付加した連想配列です。
    比較カラム名＋演算子 => 比較値
    ex. 'status=" => '終了'
    使用できる演算子は次の通りです
      ＝  等しい
      <>  等しくない
      >=  以上
      <=  以下
      >   大きい
      <   小さい
      @   サブクエリ(※)
      %   LIKE演算指定

  比較値に配列を指定すると複数の値と比較することができます(IN ,NOT IN演算)
    ex.  'status=" => ['終了','完了','削除']

  比較演算子を指定しない場合、または明示的にLIKE演算子(%)を指定したときには LIKE 演算子が使用されます。
  演算子の指定がなく、比較値がピリオド３つで連結("XXXX...YYYY")されていた場合は BETWEEN 演算子が使われます。
    ex.  'period" => '2020/01/01...2021/01/01'
          → period BETWEEN ('2020/01/01' AND '2021/01/01')

  複数のカラムを同じ比較値で比較する場合、カラム名を＋記号で連結した記述ができます。
    ex.  'title+contents' => "Keyword"
    これは右の記述と同じです。    OR => [ 'title' => "Keyword",'contents' => "Keyword" ]

  ※ サブクエリ
    特殊演算子としてサブクエリ演算(@)を使用することができます。
    これはスキーマ定義でJOIN定義を行ったフィールドを使い、リレーション先のレコードを検索した結果をもとに絞り込む演算子です。
    ex. host_id でリレーションしているテーブルから、product_name カラムが "Windows" または "MacOS" のものだけを抽出する
        'host_id@' => [ 'product_name=' => ['Windws','MacOS' ] ]
        これは次のようにSQL展開されます
          WHERE host_id IN (SELECT host_table.id FROM host_table WHERE (host_table.product_name IN ('Windws','MacOS')))

    注意) 通常演算のカラムは言語設定により言語サフィックスが付いたカラム名(column_name → column_name_en)に置換されますが、
          サブクエリのフィールド名は置換されません。そのため言語カラムを指定した場合想定外の結果になることがあります。

2.3 ビュー詳細
　ビューはクラスではなく、テンプレートファイルの集合ですが、モジュール固有のビュークラス(AppViewを継承)も生成します。
　下位クラスにヘルパークラスを所有し、HTMLの自動生成や整形をプログラミングすることができます。
　テンプレート内部でデータベースにアクセスする必要がある場合は、コントローラーから引き継いだモデルクラスを利用して
　アクセスすることができます。
　テンプレートは通常のPHPやHTMLファイルに加え、レイアウトを簡潔に記述できるセクションフォーマットが使用できます。
　セクションフォーマットの詳細については後述します。

■ 画面レイアウト定義
  View クラスは次の３種類のテンプレートファイルを組み合わせて構成します。

  template.php        PHPファイルの画面描画
  template.inc        HTMLファイルの画面描画
  template.tpl        セクション定義の画面描画
  template.mss        スタイルシート、javascriptのマージ出力テンプレート

  .inc, .tplテンプレートではHTMLデータ以外に、フレームワーク内の変数参照ができます。
  フレームワーク変数には以下のものがあります。
  ・システム変数
      ${$SERVER$}      サーバー名
      ${$SYSROOT$}     フレームワークのトップURL
      ${$APPNAME$}     アプリケーション名
      ${$URIROOT$}     アプリケーションURLのトップ
      ${$URI$}         リクエストされたURI
      ${$REFERER$}     リファラー
      ${$controller$}  コントローラ名
      ${$method$}      メソッド名 (Actionを付加する前)
      ${$filter$}      フィルタ名
      ${%0%}～{%9%}    フィルタ以降の数値または文字列パラメータ
  ・テンプレート変数
      ${変数名}       +setvar コマンドやテンプレート引数に与えられた変数
            例: +setvar => [
                  varnamse => values
                ]
              → ${varname}  =  "values"
  ・レコード変数
      ${@フィールド名}  レコードデータのフィールド値、改行を<br>変換したもの
      ${@@フィールド名} フィールド値の生データ

      レコード変数では指定フィールドの値が空のときの代替値を指定することが可能である。
        ${@フールド名:代替フィールド名}
        または
        ${@フールド名:'文字列定数'}   // シングルクォートのみ使用可
  ・レコード翻訳変数
      ${#@フィールド名}  フィールド値をキーにして言語リソースから取得
                          取得セクション名は Transfer 固定
                          ex. Transfer.フィールド値
  ・セッション変数
      ${'キー名'}        セッション変数内のキー名で指定される値
                          多次元配列の場合はキー名をピリオド「．」で結合する
  ・言語リソース変数
      ${#言語ID}        言語リソースの識別子(スカラー値)
      ${##言語ID}       スカラー値または配列値を取得

2.4 ヘルパー詳細
　ビューの従属クラスであり、テンプレートで処理できないプログラミングが必要になる処理を担当します。
　ヘルパーもコントローラーから継承したモデルクラスにアクセスできるプロパティ変数を持つ。

2.5 テンプレート詳細

■ 共通セクションフォーマット
  画面レイアウト、スタイル・スクリプトファイルおよび言語ファイルは全てに共通の「セクション」フォーマットで記述します。
  これは PHP の連想配列の記述形式を応用したフォーマットになっています。

    キー名 => 値 or 配列

  各テンプレートでは「キー名」がタグやコマンド、識別子の役割を持つ。
  改行テキストを定義するときはダブルクォートなどの特殊文字でくくる。
  ダブルクォートの場合のみ先頭と末尾の改行、空白文字はトリミングにより削除されます。
      "テキスト"          ダブルクォート 末尾に改行を入れるときは「\n」をつける
      'テキスト'          シングルクォート
      ( テキスト )        両方のクォート文字を含むときは ( ) でくくる
      { テキスト }        ( ) を含む文字列は { } でくくる
      ~ テキスト ~        ( ), { } 両方あるときは ~ でくくる
  
  セクション内で指定するハイパーリンクは、次のような省略形が使用できる。
  ただし、省略形はテンプレートの各コマンド内のみで有効であり、href 属性などで
  直接記述している場合は無効となる。

  【ハイパーリンク省略形】
      http://〜         URLの直接指定
      :〜               http://(ホスト名)/〜
      /〜               /(フレームわーフォルダ)/〜  フレームワークフォルダがルートの場合は /〜 
      ./〜              /(アプリルート)/(モジュール名)/〜
      〜                /(アプリルート)/〜

■ 画面レイアウト テンプレート (*.tpl)
 Section = {                              *** タグ・セクションの定義 ***
  @XXXXX  => [ key => Value ]             外部テンプレート呼び出し、配列は変数として引き渡し、連想配列にしなければ引数なしの呼び出し
                                          ドット(.)で始まる名前はまずインラインセクション名を参照し、未定義なら外部ファイルを参照する
  &FUNCS => [ key => value ]              Helperメソッド呼び出し、連想配列にすると引数として渡すが、スカラー定義の場合は引数なしの呼び出し
  *Comment                                コメントタグの出力
  <HTML-TAG>                              HTMLタグとしてそのまま出力する
  Text                                    キー名の無いスカラーテキストはそのまま出力
  -TAGS.XXXX#DDDD => [ attr => value,.. ] クラス名、ID名以外の属性付の単独タグ出力、キー名の無いものは無視する
  TAGS.XXXX#DDDD => [ Section ]           クラス名(XXXX)、ID名(DDDD)付のタグ出力、子要素に配列定義するとサブセクションとして処理する
  $varname => VALUE                       サブセクション内だけで有効なローカル変数に値を代入します
  // 以下はタグ処理のためのコマンド
  +setvar => [ varname => value , ...]    セクション内のグローバル変数を定義します。同名の変数があると置換されます
  +include => [ value, ... ]              JS ファイル, CSS ファイルのインクルード
  +echo => [ value, ... ]                 value のリストをそのまま出力、キー名を指定しても無視する
  +style => [ value, ... ]                value のリストをスタイルシートとして出力する
  +jquery => [ value, ... ]               value のリストをJQuery関数として出力する
  +img => [ attr => value, src ]          imageタグの簡易出力書式, class,id以外の属性を指定しない場合はスカラー値で定義できる
                                          +img => src
  +ul/ol => [ attr => value , items ]     UL/OLタグ専用のリスト出力、スカラー要素をリスト項目として出力できる
        items :=                          リスト項目は次の要素から構成する
          list-item,                        スカラー要素：　単純リスト項目
          [ list-section ],           　    配列要素：　セクション項目
          .XXXX#DDDD => [ list-section ]    クラス名(XXXX)、ID名(DDDD)付のリストセクション項目
  +select => [                            SELECTタグ専用のリスト出力
    selected_key = > [                    連想キーは初期選択するアイテム名
      option_text => value                 選択テキストと値のペアリスト
      ...   ]
  +table => [                             TABLEタグ専用の出力
        [                                 TR 配列, クラス/ID属性を使用可 (ex: .item#id => [ ... ] )
          th=>TEXT | [ TH-CELL ]          TH ヘッダセル, 要素を配列にするとセクションコマンドが使える
          .td_attr=>[ TD-CELL ] | [ TD-CELL ]  TD セル、キー名を指定するとクラス/ID属性を付加できる
        ] ... ]
  +radio => [ attr => value , items ]     INPUT RADIOタグ専用のリスト出力、スカラー要素をリスト項目として出力できる
        items :=                            リスト項目は次の要素から構成する
          checked-option-value =>           キー名と同じ値がデフォルト選択要素
            [ option => value ... ]           選択テキストと値のペアリスト
  +checkbox => [  check-items ]           チェックボックス、2つのフォーマットが使用可能
      FORMAT-I:                             単独のチェックボックスではname属性を指定する
        name=TEXT
        @Value => TEXT  [ STR => value ]   @Value=>TEXTはチェックされたときの値と表示文字、STRとvalue が等しいときはchecked
      FORMAT-II:                          複数のチェックボックスをまとめて出力するときはname属性をキーにした連想配列
        name1 => [ @value1=>TEXT [ STR1 => value1 ] ]
        name2 => [ @value2=>TEXT [ STR2 => value2 ] ]
  +dl => [ attr => value , [ items ]  ]   DLタグ専用のリスト出力、attr => value はDLタグの属性になる
      items :=                            リスト項目は次の要素から構成する
          inner-text,                       無名キースカラー要素：　DTタグのインナーテキスト
          attr => value,                    DTタグの属性
          [ list-section ],           　    無名キー配列要素：　DD要素のセクション項目
          .XXXX#DDDD => [ list-section ]    DD属性にクラス名(XXXX)、ID名(DDDD)を付けたセクション項目
  %link => [ link_str => href, ... ]      ハイパーリンク link_str に href のリンクを設定,Helper->ALinkを呼び出す
                                          単独タグの場合は省略形として以下の書式も使用できる
                                          %link_str => href
  +inline.SecName => [ ... ]              インラインのレイアウトセクション定義。テンプレート呼出しで再利用ができる
  +markdown => Text                       Text を簡易マークダウンとして整形したものを出力する。
                                          クラス属性を指定するとマークダウンのクラス名とする。
                                          Textが配列で渡された場合は、各要素を改行で結合したTextとして扱う
  +recordset => [ Section ]               読み込んだレコードごとに Section を繰返します
                                          name属性に：をつけるとモデルクラスのプロパティ変数で繰り返す
                                          ex. +recordset[:Outline] => [ Section ]
  +tabset => [                            ul タグを使ったタブセットの出力
      Title1 => [ Section ]               テンプレート内の tabset.css を読み込むことでタブコントロール表示する
      ...                                 タブ切替え時に独自の処理が不要なら、テンプレートの tabset.js を読み込む
  ]
 }

  特定の変数やデータにより、タグ出力を切替えるにはスイッチセクション(?記号)を使います。
  スイッチセクション := 
    ?<判定値> => [
      ''  => [ Section ]        // <判定値> が空のときに Section を実行
      '*' => [ Section ]        // <判定値> に何か値が入っているときに Section を実行
      <比較値> => [ Section ]   // <判定値> が <比較値>と等しい時に Section を実行
    ]
  判定条件のどれにも一致しなかったときは何も実行されません。
  <比較値>にはシェルワイルドキャラクタ(?,*)の使用と、| による複数値の OR 比較が使えます。
  <判定値> を直接指定する代わりに、ヘルパーメソッドの呼び出しによるスイッチが使えます。
      ?&HelperMethod

  メソッドで処理することにより、複雑な条件でスイッチセクションを定義できるようになります。
  このヘルパーメソッドはセクションフォーマット配列を返す関数として作成してください。

  サブセクション内でスカラー値を持つ要素はタグ属性として処理されますが、スカラー要素を持つ場合でも
  セクション要素として処理したいときは、先頭文字にエスケープ文字(\)を付加してください。
  また、逆に配列要素を持つ場合でもタグ属性として処理したい場合は！文字を先頭に付加します。

  .class => [
    style => "width:100%;"        // 通常のタグ属性
    \span => "width:100%;"        // span を属性名ではなく、span タグとして処理する
    !style => [                   // 配列要素を持つが、タグ属性(style)として処理する
      "width:100%;"               // 排列要素はすべてを連結した文字列に変換される
      "height:100%;"
    ]
  ]
  
  .tpl はViewの中で配列に再構築してから、セクション処理によりタグ出力されます。

□ 簡易マークダウン記法
本フレームワークではセクションテンプレートおよびAPIでマークダウンもどきの記法ができるようになっています。
基本的な構文は一般的なマークダウン記法に準じていますが、テーブル書式やコード書式など独自の拡張仕様になっています。

マークダウン変換したタグは<div class="easy_markdown">...</div> ブロック要素になります。
クラス名を変更するには pseudo_markdown() 関数の第2引数にクラス名文字列を指定してください。
クラス名を変えたときには、独自にスタイル定義をしないと表示がくずれます。
標準スタイルを使用する時は「markdown.css」をインポートしてください。

マークダウンテキスト内にHTMLタグを埋め込むこともできます。
マークダウンやHTMLタグ文字をエスケープする場合は。先頭にバックスラッシュ(\)を付加してください。

  [テキスト](URL)             // ハイパーリンク
  ![ALTテキスト](URL)         // URLへの画像リンク
                              URLの先頭文字に : または ! を付加すると特定のパスを指定できる
                              :　トップフォルダ
                              ! アプリトップフォルダ
                              ALTテキストの直後に：を続けると幅と高さを指定できる
                              ![ALTテキスト:幅,高さ](URL)

  --- | ___ | ***           // 水平線 <hr>
  # 見出し                  // 見出し1 <h1>
  ## 見出し                 // 見出し2 <h2>
  ### 見出し                // 見出し3 <h3>
  #### 見出し               // 見出し4 <h4>
  ##### 見出し              // 見出し5 <h5>
  ###### 見出し             // 見出し6 <h6>
  **強調**                  // 強調 (strong)
  __強調__                  // 強調 (em)
   *斜体*                   // 斜体 (font-style:italic)
  --取消線--                // 取消線 (del)
   _下線_                   // 下線 (text-decolration:underline)

  - アイテム1               // リスト(UL-LI)
  - アイテム2

  1. アイテム1               // 番号リスト(OL-LI)
  1. アイテム2

 |: ヘッダ標準 |:< ヘッダ左寄せ |:> ヘッダ右寄せ |:= ヘッダ中央 |   // テーブル(ヘッダ行:TH)
 | セル標準    |>  右寄せ       |<左寄せ         |=    中央     |   // セル(データ行:TD)
 .テーブルクラス名        // テーブルクラス(md_tbl)に追加するクラス名(省略可)

テーブルセルの属性文字の直後に＾、＠および．を続けると複数行列(rowspan/colspan)とクラス名の属性を付けられます。
また #数値 を指定すると style 属性で列幅(width)を指定できるので、わざわさ列幅指定のクラスをつくる手間を省けます。
|:.abc データ |           // THタグにクラス名 abc を漬けます
|=@@@ データ |            // TDタグを中央寄せにして３列分(@の数だけ)を連結(COLSPAN=3)します
|=^^^ データ |            // TDタグを中央寄せにして３行分(^の数だけ)を連結(ROWSPAN=3)します
|:=#80 データ |           // THタグを中央寄せにして列幅を 80px(style=width:80px;)にします。

 > 引用                     // 引用 (blockquote)
 >> 引用ネスト

  ..クラス名#ID名{ テキスト }   // クラス名、ID名を指定した SPAN タグ、クラス名、＃ID名は省略可能
                                テキスト開始の先頭に：をつけると P タグを使用する
                                ..abc:{テキスト}     =>   <p class="abc">テキスト</p>

  ...クラス名{                  // div class=クラス名、クラス名を省略すると "indent" クラスになります
    テキスト
  }...

  ```クラス名                   // pre class="クラス名"、クラス名を省略すると "code" クラスになります
  source-code
  ```
      クラス名には標準スタイルに「code, indent, quote」が定義済です。
      pre要素の「```」の代わりに「~~~」または「^^^」が使用でき、その場合の省略クラス名は indent です。

  [チェック有無]{ラベル名}  // チェック有無が FALSE(空文字、0、f、false)であれば空白ブラケット
                            // それ以外なら [X] で表示する

  行末の空白2個              // 改行 <br>
    または 全角空白1個


■ スタイル/スクリプト テンプレート (template.mss)
  テンプレートファイル名は固定ファイル名とします。テンプレート内にはスタイル・スクリプトのセクションを定義します。
    Stylesheet => []                 スタイルシートのテンプレートセクション
    Javascript => []                 Javascriptのテンプレートセクション
 
  テンプレートファイルの探索は以下の順で行う
  モジュールフォルダ(modules/*/res/)
  → アプリ共通フォルダ(View/res/)
      → Libテンプレートフォルダ(Libs/Template/res/)

  テンプレート書式：
  // コメント行                         行末までコメントとして読み飛ばす、複数行のコメントは /*   */ で括る
  Section => [                          'Section' 名が拡張子を除いたファイル名として扱う
   *Comment                             * コメントタグ の出力
   @compact => on|off                   不要な空白を全て除去してコンパクト化する
   @comment => on|off                   コメント行のみを削除
   @message => on|off                   デバッグ用のコメントメッセージを抑制する
   @charset => XXXX                     文字セットを出力する
   +import => [ value, ... ]             CSS/JS ファイルのインクルード、スカラー値でも可
                                        テンプレートファイルと同レベルか上位レベルのフォルダで探索する
   +jquery => [ value, ... ]             JSファイルの時のみ、JQuery関数 ファイルのインクルード
                                        テンプレートファイルと同レベルか上位レベルのフォルダで探索する
   +section => subsection                別のセクション定義を読み込む、自ファイルに存在しなければ上位ファイルで探索する
                                        subsection の先頭に＾を付加するとフレームワークテンプレートフォルダを探索する
                                        ＠を付加したときはフレームワーク定数「DEBUGGER」がTRUEの時だけ探索する
   tag => value                         タグの出力 => tag "value";
   tag => [ attr , ... ]                属性リストの出力 => tag { attr; ... }
  ]

  セクション外にあるコマンド(import/jquery/section/comment)はセクション指定にかかわらず処理される
  ただし、最初に見つけたテンプレート内のみで section コマンドで呼び出したテンプレート内ではセクション外のコマンドは処理されない。
  全てのセクションファイルにセクション名が見つからなかった場合、実ファイル名を探索して見つけたファイルを出力します。
  インポートするファイルがひとつだけのセクション定義を不必要に増やさなくて済む。
  
  URLにモジュール名を含めたときはモジュールフォルダ下のリソースから探索を始める
  アプリ共通リソースから探索するときはモジュール名を "res" とします。

    ex. index/css/mystyle.css   Indexモジュールの res フォルダ下にある template.mss ファイルから探索する
        res/css/common.css      アプリ共通フォルダ、またはLibテンプレートフォルダが対象

  CSSファイル名に「.min」を付加すると、ファイル内のコメントおよび改行・空白を削除したコンパクト形式で結合出力します。
  実ファイルの出力でも使用可。

    ex. res/css/style.css       ファイルの内容そのままで出力
        res/css/style.min.css   コメント行、改行・空白を削除しコンパクト化して出力する

  デバッグ中は[.min]をつけずにスタイルシートやスクリプトをテストし、完成したら「.min」を付けて運用します。
  (注)javascriptの場合、構文の最後(特に "}" 後)にセミコロンが無いとエラーとなるので必ずセミコロンを書く癖をつけること。

  import/jqueryコマンドでインポートされるファイル内では前述のシステム変数と以下のクラス変数を参照することができます。
    ${$appName$}         アプリ名
    ${$controller$}      モジュール名または 'Res'(共通リソース名)
    ${$filename$}        拡張子を除いたファイル名
    ${$extension$}       拡張子

  言語リソースの参照は、resource.lng ファイルとモジュール言語ファイルになります。
  アプリ共通パス(app/res/...)を指定した場合は resource.lng のみとなります。
    ${#言語ID}          リソース識別子

  またインポートするファイル名にクエリ文字列を付加することで環境変数として使用できます。
  このクエリ文字列はブラウザ上には表示されず、フレームワーク外からは操作できないので安全に使用できます。
    ex.  res/js/funcs.js?theme=green         ${theme} 変数として funcs.js 内で使用可能になる

  インポートファイル名にURIを指定するとインターネット上のファイルを読み込むことができます。
  URLの後ろにセミコロンに続けて「文字列1＝文字列2」という形式を付加すると、読み込んだ内容の「文字列１」を「文字列２」に置換します。
  それ以外のクラス変数やコメント削除などの置換処理は一切行いません。
    ex.  +import => http://www.hogehoge.com/js/jscript.js

  この設定はHTMLファイルに次のように記述したのと同じです。
    <script src='http://www.hogehoge.com/js/jscript.js'></script>

  この設定は外部サイトのファイルを「自分のサイトのファイル」のように動作するため
  ライセンス違反を起こさないよう注意してください。
  また読み込んだ内容によってはXSS制限で正常に動作しないこともあるので、注意が必要です。
  ダウンロード使用が認められている場合は、ファイル名を同名にしたセクションを定義して
  その都度読み込ませる方法を取ります。
    ex.
      Javascript => [
        jscript => [
          +import => http://www.hogehoge.com/js/jscript.js
        ]
      ] 
      →   <script src='/res/js/jscript.js'></script>


■ 言語リソース テンプレート (*.lng)
  言語リソースは「モジュール名＋拡張子(lng)」で言語フォルダへ格納します。
  定義フォーマットはセクション定義と同じ形式になります。参照するときは識別子をピリオドで連結した文字列を指定します。
  相対参照が指示された時に、識別子が存在しなければ絶対参照を試みる。
    相対参照: .識別子1.識別子2
    絶対参照: 識別子1.識別子2

  例えば以下の定義の時に、モジュール内の相対参照「.識別子A.識別子B」は識別子Bが未定義のため、絶対参照「識別子A.識別子B」を参照します。
    識別子A => [
      識別子B => 絶対参照
    ]
    モジュール名 => [
      識別子A => [
        識別子C => 相対参照
      ]
    ]
  このルールを利用すると、絶対参照で定義された汎用識別名を、モジュール内で別の値にオーバーライドすることができます。
  テンプレートのファイル名はリソース名として言語リソースに格納されます。
  ファイル名先頭に「＃」を付けるとグローバルリソースとして登録します。
  また、モジュールリソース内でも識別名を「＃」で始めるとグローバル識別子として登録されます。
  起動時には「common.lng」ファイルがグローバル識別子を含むリソースとして読み込まれる。
  ※ファイル名「common」はモジュール名として使用しない。
  ex.1 
  Lang.lng
    #GLOBAL => グローバル識別子       // 識別子は「GLOBAL」
    LOCAL => 識別子                   // 識別子はファイル名をモジュール名とした「Lang.LOCAL」
  ex.2
    #Lang.lng                         // Lang.lng で定義した識別名を全てグローバル識別子として登録
    #GLOBAL => グローバル識別子       // 識別子は「GLOBAL」
    LOCAL => 識別子                   // 識別子は「LOCAL」

  言語リソースはモジュール名をともに読み込むようになっており、最小限必要な定義ファイルのみを読み込むが
  他のモジュールを利用する場合、別の言語リソースも必要になります。
  そのような場合には定義ファイル内でインポートコマンド「＠ファイル名」を記述しておきます。
  ex.
      // ツールバーの言語リソースをインポート
      @Toolbar

  ファイル同士で相互インポートになる場合は、先に読み込んだ方が有効リソースとなります。
  ただし、グローバル識別子のリソースは最後に読み込んだものが有効となる点がモジュールリソースとは異なります。

2.6 クラスメソッド詳細  

  フレームワーク共通の静的クラスと、モジュール実装に必要な基底クラスに分類されます。
  静的クラスには、モジュールファイルの読み込みやディスパッチャをまとめた App クラス名、
  言語リソース用の LangUI クラスがあります。

2.6.1 静的クラス
　静的クラスはフレームワーク全体で共通の変数、処理を実装しています。
　モジュールクラスから任意に参照することができます。

◆ App クラス
・静的変数
  App::$SysVAR;                 // URIROOT, WEBROOT, URI, QUERY 変数
  App::$AppName;                // アプリケーション名
  App::$DocRoot;                // DOCUMENT_ROOT 変数
  App::$Referer;                // HTTP_REFERER
  App::$Query;                  // urlのクエリー文字列の連想配列
  App::$Filter;                 // メソッドのフィルタ指示
  App::$Params;                 // メソッドの数値パラメータ配列
  App::$ParamCount;             // 引数の数
  App::$Controller;             // コントローラ名
  App::$ActionMethod;           // メソッド名

・静的メソッド
  App::LoadModuleFiles(コントローラ名)   // appコントローラと付属モジュールファイルの読込
  App::Get_SysRoot(付加パス)             // フレームワークのトップパスに付加パスを付けた文字列
  App::Get_AppRoot(付加パス)             // アプリケーションのトップパスに付加パスを付けた文字列
  App::WebInclude(読込み配列)            //  css/js/icoファイルの読込タグ出力（単独）
  App::ImageSRC(ファイル名, 属性)        // imagesのインクルードタグ出力

◆ デバッガー関数
  DEBUG_LEVEL                           // デバッガーの最大メッセージレベル
  DEBUGGER                              // デバッグメッセージバーの表示
  debug_run_start()                     // 実行時間測定
  debug_run_time(レベル)                // 実行時間のをレベルメッセージに追加
  debug_log(メッセージレベル,...出力要素) // 出力要素のログ出力
  get_debug_logs()                      // メッセージログの取得

◆ LangUI クラス
・静的変数
  LangUI::$STRINGS;                     // 翻訳言語配列
  LangUI::$LocaleName;                  // ロケール名

・静的メソッド
  LangUI::construct($lang)              // 言語リストを元にクラスを初期化する (Main.phpのみで使用)
  LangUI::LangFiles($files)             // モジュール言語ファイルを読み込む、$filesは配列可
  LangUI::get_value($mod, $id, $allow)  // モジュール内の言語識別名から文字列を取り出す、allow = TRUE なら配列を返す
  LangUI::get_array($arr, $mod, $var)   // 言語識別名から翻訳要素名を取り出し、連想配列の値を返す

◆ MySession クラス
・静的変数
  MySession::$EnvData;                  // セッションに記憶する環境変数
  MySession::$ReqData;                  // 環境変数とREQUEST されてきた変数(POST/GET)
  MySession::$MY_SESSION_ID;            // セッション変数内のアプリ固有キー

・静的メソッド
  MySession::InitSession()              // セッション変数を初期化する(Main.phpのみで使用)
  MySession::CloseSession()             // セッション変数を書き戻す(Main.phpのみで使用)
  MySession::preservReqData(...$keys)   // REQUEST変数から環境変数に移動する
  MySession::rollbackReqData(...$keys)  // SESSION変数からREQUESTに移動する
  MySession::getVariables($tt,...$arr)  // ENV(tt=TRUE) または REQ(tt=FALSE) 変数から値を取得した配列で返す
  MySession::setVariables($tt,$arr)     // ENV(tt=TRUE) または REQ(tt=FALSE) 変数に値をセット
  MySession::set_if_empty($tt,$arr)     // setVariables と同じだが、未定義キーだけを値セットする
  MySession::get_envIDs($names)         // ENV変数を識別子指定で取得する
  MySession::rm_EnvData(...$arr)        // ENV変数をクリア

  MySession::get_LoginValue($id = NULL) // ログイン情報を取得
  MySession::set_LoginValue($arr)       // ログイン情報に書込
  MySession::setup_Login($login=NULL)   // ログイン情報を置換

◆ SendMail クラス
・静的変数
  SendMail::$Header;                  // メールヘッダ
  SendMail::$From;                    // 差出人
  SendMail::$To;                      // 宛先
  SendMail::$CC;                      // 写し
  SendMail::$BCC;                     // ブラインドコピー
  SendMail::$Message;                 // メール本文
  SendMail::$Subject;                 // 件名

・静的メソッド
  SendMail::_Init()                   // static クラスにおける初期化処理(Main.phpのみで使用)
  SendMail::AppendMessage($msg)       // 本文にmsgを追加
  SendMail::SetFrom($username,$email) // 差出人を設定
  SendMail::AppendCC($email)          // 写しの宛先を追加
  SendMail::Send()                    // メール送信

2.6.2 動的クラス
  動的クラスはモジュール実装のための基底クラスになっています。
  コントローラーやビューの基本的なメソッドが実装されています。
  アプリケーションモジュールはこれらのクラスを継承することで、モジュール固有の処理に専念できます。
  基底クラスに実装されたメソッドをモジュール固有のものに置き換えたいときは、メソッドを再定義してください。
  ただし、基底クラスの他のメソッドに影響がでないように、整合性をとる必要があるメソッドもあるので要注意。

◆ 汎用クラス
  モジュールクラスの基底クラスとなるクラスや汎用的なクラスを定義してあります。
 
・祝日表クラス(CommonHolidays)
  祝日を計算するクラスです。
  このクラスを継承した、日本の祝日を定義している JapanHolidays クラスがあります。

・ログインクラス(LoginClass)
  LoginModel を実装するための基底クラス。AppModelから派生している。
  このクラスではテーブルにユーザーID、パスワード、ユーザー言語の列が必要です。
    ユーザーID(任意)        // LoginID プロパティで指定できます
    'password'              // パスワード openssl_encrypt() で暗号化したもの
    'language'              // ユーザー言語(ja;en)

  ・クラスメソッド
    is_validUser($userid,$passwd) // ユーザデータを読み込んで検証する
    is_validLogin(POST変数)       // POSTされたログイン情報からユーザー情報を検証する

・ファイルフォルダークラス(FlatFolder)
  フォルダリストやファイルリストを管理するクラスです。
  モジュールクラス AppFilesModel がこのクラスを利用しています。

◆ モジュールクラス (* protectedメソッド：継承クラスのみで使用可)

・ベースクラス(AppObject)
  モジュールクラスの最上位クラスとなるオブジェクト管理のためのクラスです。
  MVCモデルに依存しないオブジェクトの管理クラスとなります。
  ・プロパティ変数
  *  $AOwner;                   // 所有オブジェクト
  *  $ClassType;                  // オブジェクトの所属クラス(Controller, Model, View, Helper)
  *  $ModuleName;                 // モジュールの名前
  *  $ClassName;                  // 自身のクラス名
  *  $LocalePrefix;               // 言語プレフィクス　初期値はモジュール名をセットする

  ・クラスメソッド
     ClassInit()                // サブクラスの初期化処理(サブクラス内でオーバーライド)
  *  setProperty($database)     // 連想配列によるクラスプロパティの初期化
  *  addSubclass($PropName)     // 動的クラスプロパティを生成

    _(識別名)                     // 言語ファイルから識別名で定義された文字列を取り出す
    _in(配列,識別名)              // 言語ファイルの識別子を元に連想配列から値を取り出す

・コントローラークラス(AppController)
  ・プロパティ変数
    $defaultAction                //  デフォルトのアクション
    $defaultFilter                //  デフォルトのフィルター
    $disableAction                  // 禁止する継承元のアクション

  ・クラスメソッド
    ListAction()                  // レコードリストの一覧表示
    FindAction()                  // 検索
    ViewAction()                  // レコード表示
    MakepdfAction()               // PDFを作成する
    UpdateAction()                // レコード更新

    モジュールによっては[find]や[page]メソッドを呼び出されては困る、という場合は
    $disableAction で呼出を禁止するアクションを配列で記述します。
    スカラー値を記述すると全てのアクションを禁止します。

    // ページングアクションを無効にする
    $disableAction = [ 'Page' ];     // 禁止するアクション

・モデルクラス(AppModel)
  ・プロパティ変数
    $DatabaseSchema             // クラス・プロパティ変数連想配列として定義する(static)
  * $dbDriver;                  // データベースドライバー
  * $TableHead;                 // テーブルヘッダ
  * $fields;                    // レコードフィールドの値
    $pagesize;                  // ページャーの表示単位
    $page_num;                  // 表示するページ番号
    $record_max;                // 総レコード数

  ・クラスメソッド
    getRecordByKey($id)         // PrimaryKey でレコードを取得
    GetRecord($num)             // アイテムの読み込み (JOIN無し)
    getRecordField($key,$field) // フィールドの読み込み (JOIN無し)
    SetPage($pagesize,$pagenum) // ページング設定
    RecordFinder($cond [,$filter [,$sort ]]) // レコードリストの読み込み(JOIN済レコード)
    UpdateRecord($num,$row)     // レコードの更新

・ビュークラス(AppView)
  ビュークラスはテンプレート処理へのI/Fを提供するクラスだが、サブクラスでメソッドを拡張することができる
  ・プロパティ変数
  * $Layout;                          // レイアウトテンプレート名
    SetLayout($layoutfile)      // デフォルトレイアウト変更
    PutLayout()                 // レイアウト出力
    ViewTemplate($name)         // レイアウトテンプレート処理

・ヘルパークラス(AppHelper)
  ヘルパークラスにはプロパティ変数がありません。
  ・クラスメソッド
    ViewTemplate($name)         // 親のレイアウトテンプレート処理を呼び出す
    SetData($data)              // ヘルパープロパティ変数のセット
    Resource ($res)             // リソースの出力
    ALink ($lnk,$txt)           // ハイパーリンクの生成, 言語IDを参照するには$txtを＃文字で始める
                                // $lnk を / で始めるとフレームワークのTOP、:で始めるとサイトのTOPへリンクする
    MakePageLinks()             // ページング用のリンクボタンを生成する
    MakeListTable ($deftab)     // ヘッダー付きのテーブルリスト表示、$deftabにはパラメータ
                                // $deftab['category'] = テーブルクラス
                                // $deftab['tableId']  = テーブルID 指定無しは "_TableList"
                                // $deftab['pager']    = ページャーナビを表示する
  * putTableHeader()            // テーブルヘッダーの出力(オーバーライドで変更可)
  * putColumnData($lno,$columns)// レコードカラムを出力(オーバーライドで変更可)
    Tabset ($name,$menu,$sel)   // タブセットの生成 (UL版)
    TabContents ($sel)          // タブリストの生成 (UL版)
    Form ($act, $attr)          // フォームタグの生成
    Select ($key,$name)         // SELECTタグの生成
    Input ($type,$name,$attr)   // INPUTタグの生成
    ImageTag ($file,$attr)      // webrootファイルの読込
  
・スタイルクラス(AppStyle)
  ※スタイルクラスは resource.php により処理されるので、通常は使用しない
    ViewHeader()                //　ContentType のヘッダ出力
    ViewStyle($filename)        //　レイアウトテンプレート処理

3.0 コントロール・ライブラリ

  Waffleはアプリケーションの構築に役立つプリミティブなコントロールコンポーネントが
  テンプレートやリソースに組み込んであります。
  これらは「セクションフォーマット」とJavascriptライブラリで提供されます。
  HTMLタグを直接記述すればセクション形式を使わなくてもすみますが、可読性が落ちるので
  可能な限りセクション形式を使用してください。
  
■ フローティング・ウィンドウ
  インナーウィンドウを表示します。ウィンドウの移動とリサイズが可能になっています。
  利用するには次のようなタグセクションを定義します。

    .floatWindow#＜要素ID＞ => [
      size => "幅,高さ,最小幅,最小高さ"　　　　// 指定しない場合はデフォルトサイズ
      data#init => [ value => ＜ウィンドウに表示する初期データ＞ ]  // Drag&Dropウィンドウの時に使う
      dl => [ dt => [ "ウィンドウのタイトル" ]
      dd => [
        div#datalist => [ ＜ウィンドウに表示するデータ＞ ]
      ] ]
    ]

  #init タグはウィンドウがドラッグ＆ドロップタイプの時に、初期状態のコンテンツ表示に使用します。
  通常のプロパティタイプのウィンドウにする場合は不要です。

■ バルーンヘルプ
  ポップアップするバルーンヘルプを表示します。
  バルーン表示のターゲットには「？」アイコンが自動的に付加されます。
  バルーン表示には、クリック式とマウスオーバー式が選べます。

    // バルーンヘルプ
    .popup-baloon{＜表示対象の要素ID＞} => [
      ＜テキスト＞
    ]

    表示対象となる要素IDの先頭に「＠」文字を付加すると、
    マウスオーバーによるポップアップバルーンを表示します。
    何も付加しないときはクリックバルーンとなります。

■ ポップアップ・ウィンドウ
  指定要素からポップアップするインナーウィンドウを表示します。
  フローティング・ウィンドウとの違いは、ウィンドウの移動ができない点となります。

    .popup-box#＜要素ID＞{＜表示対象の要素ID＞} => [
      size => "幅,高さ,最小幅,最小高さ"　　　　// 指定しない場合はデフォルトサイズ
      .contents => [ ＜ウィンドウに表示するデータ＞ ]
    ]
  
■ コンテキストメニュー
  右クリックで表示されるポップアップメニューを定義します。
  メニューを実行する関数を定義したグローバル変数を一緒に定義しておく必要があります。
  コンテキストメニューは UL タグで定義します。

    // コンテキストメニュー
    +ul.context-menu#＜要素ID＞{＜メニュー表示対象の要素ID＞} => [
      ＜メニューID＞ => [ ＜メニュー文字列＞ ]
      [ ＜処理の無いメニュー＞ ]        // <hr> で区切り線を挿入する時など
      ...
    ]

    ポップアップメニューを処理するコールバック関数をグローバルオブジェクト
    popup_menu_オブジェクトに登録します。

      var popup_menu_= {
          "＜メニューID＞": (＜メニュー表示対象のJQueryオブジェクト＞) {
              // ここにメニュー実行の処理を記述する
          },
          ...
      };

■ fixedstickyクラス
  固定メニューを表示するクラスを定義します。
  data-class または data-id で指定した親要素のスクロールにあわせて
  表示位置がトップに固定されるようにします。
  CSSの"position: sticky" がうまく動作しない時に使用してください。

      <div class='fixedsticky' data-element="selector">
        selector 要素のスクロールに合わせて固定表示される
      </dev>

◆ ライブラリ関数
  コアシステムに組み込んである、アプリケーションから利用できるライブラリ関数一覧です。

・ファイル名関連
  extract_extension($filename)     $filename から拡張子を取り出す
  extract_base_name($ffilename)    返り値は array(ファイル名,拡張子)
  extract_path_file_ext($path)     返り値は array(パス,ファイル名,拡張子)
  extract_path_filename($path)     返り値は array(パス,ファイル名)
  file_move($src,$dest)            $src ファイルを $dest へ移動
  byte_format($size)               ファイルサイズを表す文字列を返す(KB,MB,GB)

・文字列操作
  str_fixwidth($exp,$pading,$width)    $exp を固定長に変換する
  instr_array($str,$hayz)              $hayz 配列内に $str 文字列があるか
  text_to_html($atext)                 テキストをHTML文字列への変換
  json_escape($a)                      JSONで使用できる文字列に変換
  pseudo_markdown($atext)              簡易マークダウン
  get_protocol($href)                  先頭がプロトコルかどうか判定
  make_hyperlink($lnk,$modname)        ハイパーリンク生成
  mark_active_words($atext,$word,$class) span タグでのマーキング
  passwd_encrypt($str)                 OPENSSLを使った暗号化

・配列操作
  array_override($a, $b)                array_merge() の代替え、無名要素も上書きする
  text_line_split($del,$txt [,$trim])   テキストを配列に変換 $trimがTRUEなら空行削除
  array_to_text($array,$sep = "\n")     配列要素を改行テキストに変換
  _opr($OPR,...$items)                  検索用の論理配列生成用

◆ Javascript関数
  Javascriptで使用できるプロトタイプ関数の一覧です。

・フレームワークのパス関連クラス
    Locations.query
    Locations.last_path
    Locations.fw_fullpath             http:// で始まるフルパス変換
    Locations.set_query(string)       クエリ文字列の設定
    Locations.href_controller(array)  コントローラーパス以降を配列値で置換したURL
    Locations.href_action(array)      アクションパス以降を配列値で置換したURL
    Locations.href_filter(array)      コントローラーパス以降を配列値で置換したURL
    Locations.href_param(array)       パラメータパス以降を配列値で置換したURL
    Locations.href_number(array)    　数値パス以降を配列値で置換したURL

◆ JQueryプラグイン
  JQueryのプラグインとして使用できる関数

  スクロールを固定する
  position:sticky; が動作しないときに使います
    (セレクタ).stickyOn(親オブジェクト);
  
    (セレクタ).adjustHeight();          親要素の高さに調整する
    (セレクタ).adjustWidth();           親要素の幅に調整する

  フローティングウィンドウを開く
    (セレクタ).floatWindow(タイトル, JSON, コールバック関数);

  Yes/No ボタン付きのダイアログボックスを開く
    $.dialogBox(タイトル,メッセージ, コールバック関数);
